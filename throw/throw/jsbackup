// Base URL for json-server API
const API_BASE_URL = 'http://localhost:3000';

// Global variables to store current state
let currentSearchResults = [];
let currentLists = [];
let currentListBeingEdited = null;
let selectedItemForList = null;

// DOM elements
const searchForm = document.getElementById('search-form');
const searchInput = document.getElementById('default-search');
const resultsDiv = document.getElementById('results');
const myListsDiv = document.getElementById('my-lists');
const createListModal = document.getElementById('create-list-modal');
const createListForm = document.getElementById('create-list-form');
const listNameInput = document.getElementById('list-name');
const editListModal = document.getElementById('edit-list-modal');
const editListForm = document.getElementById('edit-list-form');
const editListNameInput = document.getElementById('edit-list-name');

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

/**
 * Initialize the application by setting up event listeners and loading existing lists
 */
function initializeApp() {
    // Set up event listeners
    setupEventListeners();
    
    // Load existing lists from the server
    loadLists();
    
    console.log('Application initialized successfully');
}

/**
 * Set up all event listeners for the application
 */
function setupEventListeners() {
    // Search form submission
    searchForm.addEventListener('submit', handleSearch);
    
    // Create list form submission
    createListForm.addEventListener('submit', handleCreateList);
    
    // Edit list form submission
    editListForm.addEventListener('submit', handleEditList);
    
    // Modal close events (handled by Flowbite automatically)
    console.log('Event listeners set up');
}

/**
 * Handle search form submission
 * @param {Event} event - The form submission event
 */
async function handleSearch(event) {
    event.preventDefault();
    
    const searchTerm = searchInput.value.trim().toLowerCase();
    
    if (!searchTerm) {
        showError('Please enter a search term');
        return;
    }
    
    try {
        // Show loading state
        resultsDiv.innerHTML = '<div class="text-center py-8"><p class="text-gray-500">Searching...</p></div>';
        
        // Fetch movies and TV shows from the API
        const response = await fetch(`${API_BASE_URL}/movieAndtvShow`);
        
        if (!response.ok) {
            throw new Error('Failed to fetch data from server');
        }
        
        const allItems = await response.json();
        
        // Filter items based on search term
        const filteredResults = allItems.filter(item => 
            item.name.toLowerCase().includes(searchTerm)
        );
        
        currentSearchResults = filteredResults;
        
        // Display results
        displaySearchResults(filteredResults);
        
    } catch (error) {
        console.error('Search error:', error);
        showError('Failed to search. Please check if json-server is running.');
    }
}

/**
 * Display search results in the results div
 * @param {Array} results - Array of search results
 */
function displaySearchResults(results) {
    if (results.length === 0) {
        resultsDiv.innerHTML = `
            <div class="text-center py-8">
                <p class="text-gray-500">No results found for "${searchInput.value}"</p>
                <p class="text-sm text-gray-400 mt-2">Try searching for a different movie or TV show</p>
            </div>
        `;
        return;
    }
    
    // Create HTML for search results
    const resultsHTML = `
        <div class="max-w-6xl mx-auto px-4">
            <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Search Results (${results.length})</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                ${results.map(item => createItemCard(item)).join('')}
            </div>
        </div>
    `;
    
    resultsDiv.innerHTML = resultsHTML;
}

/**
 * Create HTML card for a movie/TV show item
 * @param {Object} item - The movie/TV show object
 * @returns {string} HTML string for the item card
 */
function createItemCard(item) {
    return `
        <div class="bg-white rounded-lg shadow-md dark:bg-gray-800 overflow-hidden hover:shadow-lg transition-shadow">
            <div class="aspect-w-2 aspect-h-3 bg-gray-200 dark:bg-gray-700">
                <img src="${item.poster}" alt="${item.name}" class="w-full h-64 object-cover" 
                     onerror="this.src='./images/placeholder.jpg'">
            </div>
            <div class="p-4">
                <h3 class="font-semibold text-lg text-gray-900 dark:text-white mb-2 truncate">${item.name}</h3>
                <p class="text-sm text-gray-600 dark:text-gray-400 mb-1">Platform: ${item.platform}</p>
                <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">Year: ${item.release_year}</p>
                <button onclick="selectItemForList(${item.id})" 
                        class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                    Add to List
                </button>
            </div>
        </div>
    `;
}

/**
 * Handle selecting an item to add to a list
 * @param {number} itemId - The ID of the selected item
 */
function selectItemForList(itemId) {
    // Find the selected item in current search results
    selectedItemForList = currentSearchResults.find(item => item.id === itemId);
    
    if (!selectedItemForList) {
        showError('Item not found');
        return;
    }
    
    // Check if there are existing lists
    if (currentLists.length === 0) {
        // No existing lists, show modal to create new list
        showCreateListModal();
    } else {
        // Show options: add to existing list or create new list
        showListSelectionOptions();
    }
}

/**
 * Show modal to create a new list
 */
function showCreateListModal() {
    // Clear the input field
    listNameInput.value = '';
    
    // Show the modal using Flowbite
    const modal = new window.Modal(createListModal);
    modal.show();
}

/**
 * Show options to select existing list or create new list
 */
function showListSelectionOptions() {
    const optionsHTML = `
        <div class="max-w-2xl mx-auto mt-8 p-6 bg-white rounded-lg shadow-md dark:bg-gray-800">
            <h3 class="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Add "${selectedItemForList.name}" to:</h3>
            <div class="space-y-3">
                ${currentLists.map(list => `
                    <button onclick="addItemToExistingList(${list.id})" 
                            class="w-full text-left p-3 bg-gray-50 hover:bg-gray-100 dark:bg-gray-700 dark:hover:bg-gray-600 rounded-lg transition-colors">
                        <span class="font-medium text-gray-900 dark:text-white">${list.name}</span>
                        <span class="text-sm text-gray-500 dark:text-gray-400 ml-2">(${list.items.length} items)</span>
                    </button>
                `).join('')}
                <button onclick="showCreateListModal()" 
                        class="w-full p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                    + Create New List
                </button>
                <button onclick="cancelListSelection()" 
                        class="w-full p-3 bg-gray-300 hover:bg-gray-400 text-gray-800 rounded-lg transition-colors">
                    Cancel
                </button>
            </div>
        </div>
    `;
    
    // Insert the options above the search results
    resultsDiv.insertAdjacentHTML('afterbegin', optionsHTML);
}

/**
 * Cancel list selection and remove selection options
 */
function cancelListSelection() {
    selectedItemForList = null;
    // Remove the list selection options
    const optionsDiv = resultsDiv.querySelector('.max-w-2xl');
    if (optionsDiv) {
        optionsDiv.remove();
    }
}

/**
 * Add item to an existing list
 * @param {number} listId - The ID of the list to add the item to
 */
async function addItemToExistingList(listId) {
    try {
        // Find the list
        const list = currentLists.find(l => l.id === listId);
        if (!list) {
            showError('List not found');
            return;
        }
        
        // Check if item is already in the list
        const itemExists = list.items.some(item => item.id === selectedItemForList.id);
        if (itemExists) {
            showError('Item is already in this list');
            return;
        }
        
        // Add item to the list
        const updatedList = {
            ...list,
            items: [...list.items, selectedItemForList]
        };
        
        // Update the list on the server
        const response = await fetch(`${API_BASE_URL}/lists/${listId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updatedList)
        });
        
        if (!response.ok) {
            throw new Error('Failed to update list');
        }
        
        // Refresh the lists display
        await loadLists();
        
        // Clean up
        cancelListSelection();
        
        showSuccess(`"${selectedItemForList.name}" added to "${list.name}"`);
        
    } catch (error) {
        console.error('Error adding item to list:', error);
        showError('Failed to add item to list');
    }
}

/**
 * Handle create list form submission
 * @param {Event} event - The form submission event
 */
async function handleCreateList(event) {
    event.preventDefault();
    
    const listName = listNameInput.value.trim();
    
    if (!listName) {
        showError('Please enter a list name');
        return;
    }
    
    try {
        // Create new list object
        const newList = {
            name: listName,
            items: selectedItemForList ? [selectedItemForList] : [],
            createdAt: new Date().toISOString()
        };
        
        // Save the list to the server
        const response = await fetch(`${API_BASE_URL}/lists`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(newList)
        });
        
        if (!response.ok) {
            throw new Error('Failed to create list');
        }
        
        const savedList = await response.json();
        
        // Hide the modal
        const modal = window.Modal.getInstance(createListModal);
        modal.hide();
        
        // Refresh the lists display
        await loadLists();
        
        // Clean up
        listNameInput.value = '';
        selectedItemForList = null;
        cancelListSelection();
        
        showSuccess(`List "${listName}" created successfully`);
        
    } catch (error) {
        console.error('Error creating list:', error);
        showError('Failed to create list');
    }
}

/**
 * Load all lists from the server and display them
 */
async function loadLists() {
    try {
        const response = await fetch(`${API_BASE_URL}/lists`);
        
        if (!response.ok) {
            throw new Error('Failed to fetch lists');
        }
        
        currentLists = await response.json();
        displayLists();
        
    } catch (error) {
        console.error('Error loading lists:', error);
        myListsDiv.innerHTML = '<p class="text-red-500 text-center">Failed to load lists</p>';
    }
}

/**
 * Display all lists in the my-lists div
 */
function displayLists() {
    if (currentLists.length === 0) {
        myListsDiv.innerHTML = `
            <div class="text-center py-8">
                <p class="text-gray-500">No lists created yet</p>
                <p class="text-sm text-gray-400 mt-2">Search for movies or TV shows and create your first list!</p>
            </div>
        `;
        return;
    }
    
    const listsHTML = `
        <div class="max-w-6xl mx-auto px-4">
            <h2 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white">My Lists (${currentLists.length})</h2>
            <div class="space-y-6">
                ${currentLists.map(list => createListCard(list)).join('')}
            </div>
        </div>
    `;
    
    myListsDiv.innerHTML = listsHTML;
}

/**
 * Create HTML card for a list
 * @param {Object} list - The list object
 * @returns {string} HTML string for the list card
 */
function createListCard(list) {
    return `
        <div class="bg-white rounded-lg shadow-md dark:bg-gray-800 p-6">
            <div class="flex justify-between items-start mb-4">
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white">${list.name}</h3>
                <div class="flex space-x-2">
                    <button onclick="editList(${list.id})" 
                            class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                        Edit
                    </button>
                    <button onclick="deleteList(${list.id})" 
                            class="text-red-600 hover:text-red-800 text-sm font-medium">
                        Delete
                    </button>
                </div>
            </div>
            <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">${list.items.length} items</p>
            
            ${list.items.length > 0 ? `
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    ${list.items.map(item => createListItemCard(item, list.id)).join('')}
                </div>
            ` : `
                <p class="text-gray-500 text-center py-8">This list is empty</p>
            `}
        </div>
    `;
}

/**
 * Create HTML card for an item within a list
 * @param {Object} item - The item object
 * @param {number} listId - The ID of the list containing this item
 * @returns {string} HTML string for the item card
 */
function createListItemCard(item, listId) {
    return `
        <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-3 flex items-center space-x-3">
            <img src="${item.poster}" alt="${item.name}" class="w-12 h-16 object-cover rounded" 
                 onerror="this.src='./images/placeholder.jpg'">
            <div class="flex-1 min-w-0">
                <h4 class="font-medium text-gray-900 dark:text-white truncate">${item.name}</h4>
                <p class="text-sm text-gray-600 dark:text-gray-400">${item.platform}</p>
                <p class="text-xs text-gray-500 dark:text-gray-500">${item.release_year}</p>
            </div>
            <button onclick="removeItemFromList(${listId}, ${item.id})" 
                    class="text-red-500 hover:text-red-700 text-sm">
                Remove
            </button>
        </div>
    `;
}

/**
 * Edit a list name
 * @param {number} listId - The ID of the list to edit
 */
function editList(listId) {
    const list = currentLists.find(l => l.id === listId);
    if (!list) {
        showError('List not found');
        return;
    }
    
    currentListBeingEdited = list;
    editListNameInput.value = list.name;
    
    // Show the edit modal
    const modal = new window.Modal(editListModal);
    modal.show();
}

/**
 * Handle edit list form submission
 * @param {Event} event - The form submission event
 */
async function handleEditList(event) {
    event.preventDefault();
    
    const newName = editListNameInput.value.trim();
    
    if (!newName) {
        showError('Please enter a list name');
        return;
    }
    
    if (!currentListBeingEdited) {
        showError('No list selected for editing');
        return;
    }
    
    try {
        // Update the list
        const updatedList = {
            ...currentListBeingEdited,
            name: newName
        };
        
        const response = await fetch(`${API_BASE_URL}/lists/${currentListBeingEdited.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updatedList)
        });
        
        if (!response.ok) {
            throw new Error('Failed to update list');
        }
        
        // Hide the modal
        const modal = window.Modal.getInstance(editListModal);
        modal.hide();
        
        // Refresh the lists display
        await loadLists();
        
        // Clean up
        currentListBeingEdited = null;
        editListNameInput.value = '';
        
        showSuccess('List name updated successfully');
        
    } catch (error) {
        console.error('Error updating list:', error);
        showError('Failed to update list name');
    }
}

/**
 * Delete a list
 * @param {number} listId - The ID of the list to delete
 */
async function deleteList(listId) {
    const list = currentLists.find(l => l.id === listId);
    if (!list) {
        showError('List not found');
        return;
    }
    
    // Confirm deletion
    if (!confirm(`Are you sure you want to delete the list "${list.name}"? This action cannot be undone.`)) {
        return;
    }
    
    try {
        const response = await fetch(`${API_BASE_URL}/lists/${listId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            throw new Error('Failed to delete list');
        }
        
        // Refresh the lists display
        await loadLists();
        
        showSuccess(`List "${list.name}" deleted successfully`);
        
    } catch (error) {
        console.error('Error deleting list:', error);
        showError('Failed to delete list');
    }
}

/**
 * Remove an item from a list
 * @param {number} listId - The ID of the list
 * @param {number} itemId - The ID of the item to remove
 */
async function removeItemFromList(listId, itemId) {
    try {
        const list = currentLists.find(l => l.id === listId);
        if (!list) {
            showError('List not found');
            return;
        }
        
        // Remove the item from the list
        const updatedList = {
            ...list,
            items: list.items.filter(item => item.id !== itemId)
        };
        
        const response = await fetch(`${API_BASE_URL}/lists/${listId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updatedList)
        });
        
        if (!response.ok) {
            throw new Error('Failed to update list');
        }
        
        // Refresh the lists display
        await loadLists();
        
        showSuccess('Item removed from list');
        
    } catch (error) {
        console.error('Error removing item from list:', error);
        showError('Failed to remove item from list');
    }
}

/**
 * Show error message
 * @param {string} message - The error message to display
 */
function showError(message) {
    // Create a temporary error message element
    const errorDiv = document.createElement('div');
    errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
    errorDiv.textContent = message;
    
    document.body.appendChild(errorDiv);
    
    // Remove after 3 seconds
    setTimeout(() => {
        errorDiv.remove();
    }, 3000);
    
    console.error(message);
}

/**
 * Show success message
 * @param {string} message - The success message to display
 */
function showSuccess(message) {
    // Create a temporary success message element
    const successDiv = document.createElement('div');
    successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
    successDiv.textContent = message;
    
    document.body.appendChild(successDiv);
    
    // Remove after 3 seconds
    setTimeout(() => {
        successDiv.remove();
    }, 3000);
    
    console.log(message);
}
